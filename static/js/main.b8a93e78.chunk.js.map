{"version":3,"sources":["media/logo.svg","media/phone.jpg","media/bridge.jpg","media/truck.jpg","media/produce.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","width","window","innerWidth","height","innerHeight","sizeLimit","console","log","className","type","bg","React","PureComponent","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,iLC+C5BC,E,kDArCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,YACfC,UAAW,KALI,E,kKAcjBC,QAAQC,IAAIN,OAAOC,c,+BAInB,OACE,yBAAKM,UAAU,aACb,6BAASA,UAAU,eACjB,yBAAKA,UAAU,yBACb,wBAAIA,UAAU,cAAd,UACA,wBAAIA,UAAU,cAAd,WAEA,wBAAIA,UAAU,iBACZ,yBAAKA,UAAU,OAAf,eADF,aAKJ,6BAASA,UAAU,UACnB,kBAAC,IAAD,CAAaC,KAAK,QAAQC,IAAI,S,GAhCpBC,IAAMC,eCGJC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.b8a93e78.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d6aa591e.svg\";","module.exports = __webpack_public_path__ + \"static/media/phone.585cb6cf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bridge.b94a6599.jpg\";","module.exports = __webpack_public_path__ + \"static/media/truck.2075af6d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/produce.92e47cd6.jpg\";","import React from \"react\";\nimport logo from \"./media/logo.svg\";\nimport home1 from \"./media/phone.jpg\";\nimport home2 from \"./media/bridge.jpg\";\nimport home3 from \"./media/truck.jpg\";\nimport home4 from \"./media/produce.jpg\";\nimport \"./App.scss\";\nimport ParticlesBg from \"particles-bg\";\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      sizeLimit: 768,\n    };\n  }\n\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  updateWindowDimensions() {\n    console.log(window.innerWidth);\n  }\n\n  render() {\n    return (\n      <div className=\"full-body\">\n        <section className=\"home d-flex\">\n          <div className=\"head-text text-center\">\n            <h1 className=\"tbird-font\">T-BIRD</h1>\n            <h2 className=\"tbird-font\">CAPITAL</h2>\n\n            <h2 className=\"playfair mt-5\">\n              <red className=\"red\">early-stage</red> angels\n            </h2>\n          </div>\n        </section>\n        <section className=\"about\"></section>\n        <ParticlesBg type=\"color\" bg={true} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}